from collections import UserDict

class Field:
    def __init__(self, value):
        self.value = value
       
    def __str__(self):
        return str(self.value) # реалізація класу

class Name(Field): 
    def __init__(self, name):
        self.name= name
        
                
class Phone(Field):
    MAX_LEN = 10
    def __init__(self, phone):
        self.phone = phone

    def __str__(self):    
        if len(str(self.phone)) <= 10:
            return str(self.phone)
        elif len (str(self.phone)) > 10:
            return f'There is too many digits in the entered phone number: {self.phone}. The max length is 10 symbols.'
        
class Record (Field):
    def __init__(self, name):
        self.name = Name (name)
        self.phones = []
        record = {}
        record [self.name] = self.phones
                
    def add_phone (self):
        for self.phone in self.phones:
            if self.phone not in self.phones:
                return self.phones.append(self.phone, end= ',')
            else:
                return self.phone == self.phone
    
    def find_phone(self):
        for self.phone in self.phones:
            if self.phone in self.phones:
                return self.phone
            else:
                return f'{self.phone} is not found'
   
    def edit_phones(self):
        [self.phone if self.phone == self.phone else self.phone for self.phone in self.phones]
        return self.phones

    # реалізація класу

    def __str__(self):
        return f"Contact name: {self.name}, phones: {'; '.join(self.phone for self.phone in self.phones)}"

class AddressBook(UserDict): # реалізація класу
    
    def add_record (self, name, record):
        self.record = record
        for name, record [name] in self.data.items():
            if name and record [name] not in self.data.items:
                self.data.update(name, record [name])
                return f'{name:10} : {record [name]}'
            else:
                print (f'{name:10} : {record [name]} is already added to the Addressbook')  

    def find_record (self, name, record):
        for name, record [name] in self.data.items():
            if name and record [name] in self.data.items():
                return f'{record} is found'
            
    def  delete_record (self, name, record):
        for name, record [name] in self.data.items():
            if name and record [name] not in self.data.items:
                self.data.pop (name, record) 
            return f'{record[name]} is removed from Addressbook '
          
__name__ == "__main__"
